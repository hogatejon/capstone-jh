{
    "pipes": [
        {
            "name": "CharterSearchPipe",
            "id": "pipe-CharterSearchPipe-55d8a3636953a73d7203690db9547a8a",
            "file": "src/app/shared/pipes/charter-search.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "charters",
                            "type": "Charter[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Charter[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "charters",
                            "type": "Charter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "charterSearch",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Charter } from '../../models/Charter';\n\n@Pipe({\n  name: 'charterSearch'\n})\nexport class CharterSearchPipe implements PipeTransform {\n\n  transform(charters: Charter[], searchValue: string): Charter[] {\n    const searchText = searchValue?.toLowerCase();\n    if (searchText === '') {\n      return charters;\n    }\n    const filteredCharters = charters?.filter(charter => {\n      return charter.GroupName.toLowerCase().indexOf(searchText) !== -1 ||\n             charter.OrganizationName.toLowerCase().indexOf(searchText) !== -1 ||\n             charter.SponsorName.toLowerCase().indexOf(searchText) !== -1 ||\n             charter.SponsorPhone.indexOf(searchText) !== -1 ||\n             charter.SponsorEmail.toLowerCase().indexOf(searchText) !== -1;\n    });\n    return filteredCharters;\n  }\n}\n"
        },
        {
            "name": "OrgFilterPipe",
            "id": "pipe-OrgFilterPipe-ab44e227a0d6b18063de13d891108302",
            "file": "src/app/shared/pipes/org-filter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "charters",
                            "type": "Charter[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "orgName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Charter[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "charters",
                            "type": "Charter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "orgName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "orgFilter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Charter } from 'src/app/models/Charter';\n\n@Pipe({\n  name: 'orgFilter'\n})\nexport class OrgFilterPipe implements PipeTransform {\n\n  transform(charters: Charter[], orgName: string): Charter[] {\n    if (orgName === '') {\n      return charters;\n    }\n    return charters?.filter((charter) => {\n      return charter.OrganizationName === orgName;\n    });\n  }\n\n}\n"
        },
        {
            "name": "PhonePipe",
            "id": "pipe-PhonePipe-49902528896c28e9d7319253a8be95de",
            "file": "src/app/shared/pipes/phone.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "phone",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'phone'\n})\nexport class PhonePipe implements PipeTransform {\n\n  transform(value: string): string {\n    const strippedNumbers = value.replace(/\\D/g, '');\n\n    return `(${strippedNumbers.substr(0, 3)}) ${strippedNumbers.substr(3, 3)}-${strippedNumbers.substr(6)}`\n  }\n\n}\n"
        },
        {
            "name": "SpotsAvailablePipe",
            "id": "pipe-SpotsAvailablePipe-1aac0618624bb9d350e510e0ae465738",
            "file": "src/app/shared/pipes/spots-available.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "charter",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "getClass",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "charter",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "getClass",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "spotsAvailable",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { Charter } from '../../models/Charter';\n\n@Pipe({\n  name: 'spotsAvailable'\n})\nexport class SpotsAvailablePipe implements PipeTransform {\n\n  transform(charter: Charter, getClass = false): string {\n    const max = charter?.MaxGroupSize;\n    const current = charter?.Members?.length;\n\n    if (max > current) {\n      return`${current}/${max} Spots Available`;\n    } else {\n      if (getClass) {\n        return 'no-avail';\n      } else {\n        return `${current}/${max} No Spots Available`\n      }\n    }\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "Charter",
            "id": "interface-Charter-16cd609034a5722dd1f5640d31c5990c",
            "file": "src/app/models/Charter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Member } from './Member';\r\n\r\nexport interface Charter {\r\n  GroupId: number;\r\n  GroupName: string;\r\n  OrganizationName: string;\r\n  SponsorName: string;\r\n  SponsorPhone: string;\r\n  SponsorEmail: string;\r\n  MaxGroupSize: number;\r\n  Members: Array<Member>\r\n}\r\n",
            "properties": [
                {
                    "name": "GroupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "GroupName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "MaxGroupSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "Members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Member>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "OrganizationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "SponsorEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "SponsorName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "SponsorPhone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "FishingOrganization",
            "id": "interface-FishingOrganization-6e304f89c2941bb54c7b68746e252552",
            "file": "src/app/models/FishingOrganization.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FishingOrganization {\r\n  OrganizationName: string;\r\n  OrganizationId: string;\r\n  Description: string;\r\n  imageUrl?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "Description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "OrganizationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "OrganizationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "LoginRequest",
            "id": "interface-LoginRequest-6b31ad9bcca687742cd368a1445a073f",
            "file": "src/app/models/login-request.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface LoginRequest {\r\n  username: string;\r\n  password: string;\r\n  name?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Member",
            "id": "interface-Member-748d59d7130534c90ad294dd89d04569",
            "file": "src/app/models/Member.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Member {\r\n  MemberId: string;\r\n  MemberEmail: string;\r\n  MemberName: string;\r\n  MemberPhone: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "MemberEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "MemberId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "MemberName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "MemberPhone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-555d703fa34867ad981ddcff1e8fa418",
            "file": "src/app/models/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: number;\r\n  name: string;\r\n  username: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "GroupService",
            "id": "injectable-GroupService-d8dd92a4e88d99bbdf5b8c236656ae38",
            "file": "src/app/services/group.service.ts",
            "properties": [
                {
                    "name": "addGroupUrl",
                    "defaultValue": "'http://localhost:8082/api/groups'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "charterById$",
                    "defaultValue": "new BehaviorSubject<Charter>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Charter>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "charters$",
                    "defaultValue": "new BehaviorSubject<Charter[]>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Charter[]>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "deleteGroupByIdUrl",
                    "defaultValue": "'http://localhost:8082/api/groups/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "editGroupUrl",
                    "defaultValue": "'http://localhost:8082/api/groups'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filterOrg",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "getAllGroupsUrl",
                    "defaultValue": "'http://localhost:8082/api/groups'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getGroupByIdUrl",
                    "defaultValue": "'http://localhost:8082/api/groups/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getGroupsByOrgUrl",
                    "defaultValue": "'http://localhost:8082/api/groups/byorganization/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "jsonContentTypeHeaders",
                    "defaultValue": "{\n    headers: new HttpHeaders().set('Content-Type', 'application/json')\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedGroup",
                    "defaultValue": "new BehaviorSubject<Charter>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [
                {
                    "name": "addCharter",
                    "args": [
                        {
                            "name": "charter",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Charter>",
                    "typeParameters": [
                        "Charter"
                    ],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "charter",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCharterById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Charter>",
                    "typeParameters": [
                        "Charter"
                    ],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editGroup",
                    "args": [
                        {
                            "name": "group",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Charter>",
                    "typeParameters": [
                        "Charter"
                    ],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCharters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCharterById",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "number | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChartersByOrg",
                    "args": [
                        {
                            "name": "orgId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Charter[]>",
                    "typeParameters": [
                        "Charter"
                    ],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orgId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelectedGroup",
                    "args": [
                        {
                            "name": "group",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Charter } from '../models/Charter';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GroupService {\n\n  private getAllGroupsUrl: string = 'http://localhost:8082/api/groups';\n  private getGroupByIdUrl: string = 'http://localhost:8082/api/groups/';\n  private getGroupsByOrgUrl: string = 'http://localhost:8082/api/groups/byorganization/';\n  private addGroupUrl: string = 'http://localhost:8082/api/groups';\n  private editGroupUrl: string = 'http://localhost:8082/api/groups';\n  private deleteGroupByIdUrl: string = 'http://localhost:8082/api/groups/'\n  jsonContentTypeHeaders = {\n    headers: new HttpHeaders().set('Content-Type', 'application/json')\n  };\n\n  selectedGroup = new BehaviorSubject<Charter>(null);\n  filterOrg = new BehaviorSubject<string>('');\n\n  constructor(private readonly http: HttpClient) { }\n\n  charters$: BehaviorSubject<Charter[]> = new BehaviorSubject<Charter[]>(null);\n  charterById$: BehaviorSubject<Charter> = new BehaviorSubject<Charter>(null);\n\n  getAllCharters() {\n    this.http.get<Charter[]>(this.getAllGroupsUrl).subscribe((charters) => {\n      this.charters$.next(charters);\n    });\n  }\n\n  getCharterById(groupId: number | string) {\n    this.http.get<Charter>(this.getGroupByIdUrl + groupId).subscribe((charter) => {\n      this.charterById$.next(charter);\n    });\n  }\n\n  getChartersByOrg<Charter>(orgId: string): Observable<Charter[]> {\n    return this.http.get<Charter[]>(this.getGroupsByOrgUrl + orgId);\n  }\n\n  addCharter<Charter>(charter: Charter): Observable<Charter> {\n    return this.http.post<Charter>(this.addGroupUrl, charter, this.jsonContentTypeHeaders);\n  }\n\n  deleteCharterById<Charter>(id: number): Observable<Charter> {\n    return this.http.delete<Charter>(this.deleteGroupByIdUrl + id);\n  }\n\n  editGroup<Charter>(group: Charter): Observable<Charter> {\n    return this.http.put<Charter>(this.editGroupUrl, group, this.jsonContentTypeHeaders);\n  }\n\n  updateSelectedGroup(group: Charter) {\n    this.selectedGroup.next(group);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-58edcf4b11d6ae394bbe27df686d7353",
            "file": "src/app/login/login.service.ts",
            "properties": [
                {
                    "name": "addUserUrl",
                    "defaultValue": "'http://localhost:8082/api/users'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "requestLoginUrl",
                    "defaultValue": "'http://localhost:8082/api/login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "userNameAvailableUrl",
                    "defaultValue": "'http://localhost:8082/api/username_available/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "userResponse$",
                    "defaultValue": "new BehaviorSubject<User>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "registerUser",
                    "args": [
                        {
                            "name": "registerRequest",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerRequest",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "requestLogin",
                    "args": [
                        {
                            "name": "loginRequest",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loginRequest",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { LoginRequest } from 'src/app/models/login-request.interface';\r\nimport { User } from 'src/app/models/user.interface';\r\n\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { MessageService } from '../shared/components/message/message.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n\r\n  private requestLoginUrl = 'http://localhost:8082/api/login';\r\n  private userNameAvailableUrl = 'http://localhost:8082/api/username_available/';\r\n  private addUserUrl = 'http://localhost:8082/api/users';\r\n\r\n  userResponse$: BehaviorSubject<User> = new BehaviorSubject<User>(null);\r\n\r\n  constructor(private readonly http: HttpClient,\r\n              private readonly messageService: MessageService) { }\r\n\r\n  requestLogin(loginRequest: LoginRequest) {\r\n    this.http.post(this.requestLoginUrl, loginRequest).subscribe((response: User) => {\r\n      this.userResponse$.next(response);\r\n    },\r\n    (err) => { this.userResponse$.next(err) });\r\n  }\r\n\r\n  registerUser(registerRequest: LoginRequest) {\r\n    this.http.get(this.userNameAvailableUrl + registerRequest.username, { responseType: 'text'}).subscribe((response) => {\r\n      if (response.toString() === 'YES') {\r\n        this.http.post(this.addUserUrl, registerRequest).subscribe((res) => {\r\n          this.messageService.showMessage('Success!', 'You have registered a new User!', 'success');\r\n          this.requestLogin({\r\n            username: registerRequest.username,\r\n            password: registerRequest.password\r\n          });\r\n        });\r\n      } else {\r\n        this.messageService.showMessage('Error', 'Username is taken', 'error');\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemberService",
            "id": "injectable-MemberService-e660e4bb10764eb27856e3e1593b5c4c",
            "file": "src/app/services/member.service.ts",
            "properties": [
                {
                    "name": "groupBaseUrl",
                    "defaultValue": "`http://localhost:8082/api/groups`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "addMemberToGroup",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "Member",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Member>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "Member",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMemberFromGroup",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "memberId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Member>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "memberId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editMemberInGroup",
                    "args": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "member",
                            "type": "Member",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Member>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "groupId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "member",
                            "type": "Member",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Member } from '../models/Member';\n\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemberService {\n\n  groupBaseUrl: string = `http://localhost:8082/api/groups`\n\n  constructor(private readonly http: HttpClient) { }\n\n  deleteMemberFromGroup(groupId: string, memberId: string): Observable<Member> {\n    return this.http.delete<Member>(`${this.groupBaseUrl}/${groupId}/members/${memberId}`);\n  }\n\n  addMemberToGroup(groupId: string, member: Member): Observable<Member> {\n    return this.http.post<Member>(`${this.groupBaseUrl}/${groupId}/members`, member);\n  }\n\n  editMemberInGroup(groupId: string, member: Member): Observable<Member> {\n    return this.http.put<Member>(`${this.groupBaseUrl}/${groupId}/members`, member)\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MessageService",
            "id": "injectable-MessageService-01ab7e408640f9893943c5aca481d26d",
            "file": "src/app/shared/components/message/message.service.ts",
            "properties": [
                {
                    "name": "message$",
                    "defaultValue": "new BehaviorSubject<Message>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Message>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "header",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "timeout",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "5000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { Message } from './Message';\n\nimport { BehaviorSubject } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessageService {\n\n  message$: BehaviorSubject<Message> = new BehaviorSubject<Message>(null);\n\n  constructor() { }\n\n  showMessage(header: string, message: string, severity: string, timeout: number = 5000) {\n    const newMessage = new Message(header, message, severity, timeout);\n    this.message$.next(newMessage);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "type": "injectable"
        },
        {
            "name": "OrganizationService",
            "id": "injectable-OrganizationService-6017166a7eadbf54d6fd2174bc2b5433",
            "file": "src/app/services/organization.service.ts",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "organizations$",
                    "defaultValue": "new BehaviorSubject<FishingOrganization[]>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FishingOrganization[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "orgUrl",
                    "defaultValue": "'http://localhost:8082/api/organizations'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getOrganizations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { FishingOrganization } from '../models/FishingOrganization';\n\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrganizationService {\n\n  private orgUrl: string = 'http://localhost:8082/api/organizations';\n  errorMessage: string;\n  organizations$: BehaviorSubject<FishingOrganization[]> = new BehaviorSubject<FishingOrganization[]>(null);\n\n  constructor(private readonly http: HttpClient) { }\n\n  getOrganizations() {\n    this.http.get<FishingOrganization[]>(this.orgUrl).subscribe((orgs) => {\n      this.organizations$.next(orgs);\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "UserLogInGuardService",
            "id": "injectable-UserLogInGuardService-b6877107fefe3e266df1d2a5c2891f66",
            "file": "src/app/login/user-log-in-guard.service.ts",
            "properties": [
                {
                    "name": "loggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\n\r\nimport { LoginService } from '../login/login.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserLogInGuardService implements CanActivate {\r\n\r\n  loggedIn: boolean = false;\r\n\r\n  constructor(private readonly loginService: LoginService,\r\n              private readonly router: Router) { }\r\n\r\n  canActivate() {\r\n    this.loginService.userResponse$.subscribe((res) => {\r\n      if (res?.id && res?.name && res?.username) {\r\n        this.loggedIn = true;\r\n      } else {\r\n        this.router.navigate(['/login']);\r\n        this.loggedIn = false;\r\n      }\r\n    });\r\n    return this.loggedIn;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Message",
            "id": "class-Message-787802a6ef2810525fbb563cbb134181",
            "file": "src/app/shared/components/message/Message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Message {\r\n\r\n  header: string;\r\n  message: string;\r\n  severity: string;\r\n  timeout: number;\r\n\r\n  constructor(header, message, severity?, timeout?) {\r\n    this.header = header;\r\n    this.message = message;\r\n    this.severity = severity || 'info';\r\n    this.timeout = timeout || 4000;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "header",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "severity",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "timeout",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "header",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "severity",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeout",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "timeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-6cdf8cc2ebc32a5ad9a8cd25ce5f9e84",
            "file": "src/app/about/about.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [
                "./about.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.scss']\r\n})\r\nexport class AboutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./about.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>About</h1>\r\n<div class=\"explanation-box\">\r\n  <p>\r\n    This is an application built for employees of a business that offers charter services.\r\n    It is used to group together the different types of charters (organizations) on the Home page.\r\n    From there, the user can drill down directly into the Charters page via the home page, or go\r\n    directly to it via the nav bar. From that page, the user can search, edit, and add charters/members.\r\n  </p>\r\n</div>\r\n"
        },
        {
            "name": "AddCharterComponent",
            "id": "component-AddCharterComponent-ce595d50b84d9001b6d55315782df9fb",
            "file": "src/app/charters/add-charter/add-charter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-charter",
            "styleUrls": [
                "./add-charter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-charter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Charter"
                },
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "modalClose",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "action",
                    "defaultValue": "'Add'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "charterForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "fishingOrgs",
                    "defaultValue": "['Deep Sea', 'River', 'Lake', 'Small Creek', 'Ice', 'Inshore']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "submit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "buildCharterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exitModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { Charter } from '../../models/Charter';\r\nimport { MessageService } from '../../shared/components/message/message.service';\r\nimport { GroupService } from '../../services/group.service';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-add-charter',\r\n  templateUrl: './add-charter.component.html',\r\n  styleUrls: ['./add-charter.component.scss']\r\n})\r\nexport class AddCharterComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() currentValue?: Charter\r\n  @Input() isEdit?: boolean;\r\n  @Output() modalClose = new EventEmitter<boolean>();\r\n\r\n  charterForm: FormGroup\r\n  fishingOrgs = ['Deep Sea', 'River', 'Lake', 'Small Creek', 'Ice', 'Inshore'];\r\n  ngDestroyed$: Subject<boolean> = new Subject();\r\n  submit: boolean = false;\r\n  action: string = 'Add';\r\n\r\n  constructor(private readonly fb: FormBuilder,\r\n              private readonly groupService: GroupService,\r\n              private readonly messageService: MessageService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.buildCharterForm();\r\n    if (this.currentValue) {\r\n      this.charterForm.patchValue(this.currentValue);\r\n    }\r\n    if (this.isEdit) {\r\n      this.action = 'Edit';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngDestroyed$.next();\r\n  }\r\n\r\n  exitModal() {\r\n    this.modalClose.emit(true);\r\n  }\r\n\r\n  buildCharterForm() {\r\n    this.charterForm = this.fb.group({\r\n      'GroupName': [null, Validators.required],\r\n      'SponsorName': [null, Validators.required],\r\n      'SponsorPhone': [null, Validators.required],\r\n      'SponsorEmail': [null, Validators.compose([Validators.email, Validators.required])],\r\n      'OrganizationName': [null, Validators.required],\r\n      'MaxGroupSize': [null, Validators.required]\r\n    }, { updateOn: 'blur'});\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submit = true;\r\n    if (this.charterForm.valid) {\r\n      if (!this.currentValue) {\r\n        this.groupService.addCharter(this.charterForm.getRawValue()).pipe(takeUntil(this.ngDestroyed$)).subscribe(() => {\r\n          this.groupService.getAllCharters();\r\n          this.messageService.showMessage('Group Added!', `You have successfully added ${this.charterForm.getRawValue().GroupName}`, 'success');\r\n          this.exitModal();\r\n        });\r\n      } else {\r\n        const appendId = this.charterForm.getRawValue();\r\n        appendId.GroupId = this.currentValue.GroupId;\r\n        this.groupService.editGroup(appendId).pipe(takeUntil(this.ngDestroyed$)).subscribe(() => {\r\n          this.messageService.showMessage('Group Edited!', `You have successfully edited ${this.charterForm.getRawValue().GroupName}`, 'success');\r\n          this.exitModal();\r\n        });\r\n      }\r\n    } else {\r\n      this.charterForm.markAllAsTouched();\r\n      this.charterForm.markAsDirty();\r\n      this.messageService.showMessage('Error', 'Please fill out whole form before submitting', 'error');\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".blur {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(4px);\r\n  background:\r\n\t\trgba(0, 0, 0, 0.66)\r\n\t\tno-repeat\r\n\t\t0 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1000;\r\n}\r\n\r\n.panel {\r\n  width: 35vw;\r\n  height: fit-content;\r\n  background-color: white;\r\n  border: 1px solid gray;\r\n  border-radius: .75rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.panel-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid gray;\r\n  padding: 0 1rem;\r\n  background-color: #F7F7F7;\r\n\r\n  div {\r\n    cursor: pointer;\r\n  }\r\n\r\n  div:hover {\r\n    color:#E66360;\r\n  }\r\n}\r\n\r\n.panel-content {\r\n  padding: 1rem;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n}\r\n\r\nform > input:last-of-type {\r\n  display: block;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.validation-error {\r\n  color: #cc2d24;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.input-error {\r\n  background-color: rgba(230, 99, 96, 0.2);\r\n  border: 3px solid #cc2d24;\r\n}\r\n\r\ninput {\r\n  border-radius: 0.25rem;\r\n}\r\n\r\ninput[type=text] {\r\n  padding: 0.5rem;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  align-content: center;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .panel {\r\n    width: 85vw;\r\n    height: fit-content;\r\n  }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./add-charter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"blur\">\n  <div class=\"panel fade-in\">\n    <div class=\"panel-header\">\n      <h2>{{ action }} Charter</h2>\n      <div (click)=\"exitModal()\">&#10006;</div>\n    </div>\n    <section class=\"panel-content\">\n      <form [formGroup]=\"charterForm\">\n        <label class=\"form-label-required\" for=\"GroupName\">Charter Name</label>\n        <input type=\"text\"\n               formControlName=\"GroupName\"\n               placeholder=\"Enter Name of Charter here\"\n               [class.input-error]=\"!charterForm.controls['GroupName'].valid && charterForm.controls['GroupName'].touched\">\n        <div *ngIf=\"!charterForm.controls['GroupName'].valid && charterForm.controls['GroupName'].touched\"\n           class=\"validation-error\">Provide a Charter Name</div>\n        <label class=\"form-label-required\" for=\"SponsorName\">Guide Name</label>\n        <input type=\"text\"\n               formControlName=\"SponsorName\"\n               placeholder=\"Enter Name of Sponsor here\"\n               [class.input-error]=\"!charterForm.controls['SponsorName'].valid && charterForm.controls['SponsorName'].touched\">\n        <div *ngIf=\"!charterForm.controls['SponsorName'].valid && charterForm.controls['SponsorName'].touched\"\n             class=\"validation-error\">Provide a Sponsor Name</div>\n        <label class=\"form-label-required\" for=\"SponsorPhone\">Guide Phone Number</label>\n        <input type=\"text\"\n               formControlName=\"SponsorPhone\"\n               placeholder=\"Enter Sponsor Phone here\"\n               [class.input-error]=\"!charterForm.controls['SponsorPhone'].valid && charterForm.controls['SponsorPhone'].touched\">\n        <div *ngIf=\"!charterForm.controls['SponsorPhone'].valid && charterForm.controls['SponsorPhone'].touched\"\n             class=\"validation-error\">Provide a Phone Number</div>\n        <label class=\"form-label-required\" for=\"SponsorEmail\">Guide Email</label>\n        <input type=\"text\"\n               formControlName=\"SponsorEmail\"\n               placeholder=\"Enter Sponsor Email here\"\n               [class.input-error]=\"!charterForm.controls['SponsorEmail'].valid && charterForm.controls['SponsorEmail'].touched\">\n        <div *ngIf=\"!charterForm.controls['SponsorEmail'].valid && charterForm.controls['SponsorEmail'].touched\"\n             class=\"validation-error\">Provide an Email</div>\n        <label class=\"form-label-required\" for=\"MaxGroupSize\">Max Group Size</label>\n        <input type=\"number\"\n               formControlName=\"MaxGroupSize\"\n               placeholder=\"Enter Max Group Size here\"\n               [class.input-error]=\"!charterForm.controls['MaxGroupSize'].valid && charterForm.controls['MaxGroupSize'].touched\">\n        <div *ngIf=\"!charterForm.controls['MaxGroupSize'].valid && charterForm.controls['MaxGroupSize'].touched\"\n             class=\"validation-error\">Provide a Max Group Size</div>\n        <label class=\"form-label-required\" for=\"OrganizationName\">Organization</label>\n        <select size=\"1\" formControlName=\"OrganizationName\"\n                [class.input-error]=\"!charterForm.controls['OrganizationName'].valid && charterForm.controls['OrganizationName'].touched\">\n          <option value=\"null\">Select an Organization</option>\n          <option *ngFor=\"let org of fishingOrgs;\" value=\"{{ org }}\">{{ org }}</option>\n        </select>\n        <div *ngIf=\"!charterForm.controls['OrganizationName'].valid && charterForm.controls['OrganizationName'].touched\"\n             class=\"validation-error\">Provide an Organization Name</div>\n        <input type=\"submit\"\n               value=\"Submit Charter\"\n               (click)=\"onSubmit()\">\n      </form>\n    </section>\n  </div>\n</div>\n"
        },
        {
            "name": "AddMemberComponent",
            "id": "component-AddMemberComponent-202366f6b490fb6e87d26c3aa287dd1e",
            "file": "src/app/charters/add-member/add-member.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-member",
            "styleUrls": [
                "./add-member.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-member.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addGroupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "currentValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Member"
                },
                {
                    "name": "isEdit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "modalClose",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "action",
                    "defaultValue": "'Add'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "memberForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "submit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "buildMemberForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exitModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "populateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { Member } from '../../models/Member';\r\nimport { MessageService } from '../../shared/components/message/message.service';\r\nimport { MemberService } from '../../services/member.service';\r\n\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-add-member',\r\n  templateUrl: './add-member.component.html',\r\n  styleUrls: ['./add-member.component.scss']\r\n})\r\nexport class AddMemberComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() addGroupId: string;\r\n  @Input() isEdit?: boolean;\r\n  @Input() currentValue?: Member;\r\n  @Output() modalClose = new EventEmitter<boolean>();\r\n  memberForm: FormGroup;\r\n  ngDestroyed$: Subject<boolean> = new Subject();\r\n  submit: boolean = false;\r\n  action: string = 'Add';\r\n\r\n  constructor(private readonly fb: FormBuilder,\r\n              private readonly memberService: MemberService,\r\n              private readonly messageService: MessageService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.buildMemberForm();\r\n    if (this.currentValue) {\r\n      this.populateForm();\r\n    }\r\n    if (this.isEdit) {\r\n      this.action = 'Edit';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngDestroyed$.next();\r\n  }\r\n\r\n  exitModal() {\r\n    this.modalClose.emit(true);\r\n  }\r\n\r\n  buildMemberForm() {\r\n    this.memberForm = this.fb.group({\r\n      'MemberName': [null, Validators.required],\r\n      'MemberEmail': [null, [Validators.required, Validators.email]],\r\n      'MemberPhone': [null, Validators.required]\r\n    });\r\n  }\r\n\r\n  populateForm() {\r\n    this.memberForm.patchValue(this.currentValue);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submit = true;\r\n    if (this.memberForm.valid) {\r\n      if (!this.currentValue) {\r\n        this.memberService.addMemberToGroup(this.addGroupId, this.memberForm.getRawValue()).pipe(takeUntil(this.ngDestroyed$)).subscribe(\r\n          () => {\r\n            this.messageService.showMessage('Member Added!', `You successfully added ${this.memberForm.getRawValue().MemberName} to the Charter!`, 'success');\r\n            this.exitModal()\r\n          //TODO: Add error Handling\r\n          }\r\n        );\r\n      } else {\r\n        const addId = this.memberForm.getRawValue();\r\n        addId.MemberId = this.currentValue.MemberId;\r\n        this.memberService.editMemberInGroup(this.addGroupId, addId).pipe(takeUntil(this.ngDestroyed$)).subscribe(\r\n          () => {\r\n            this.messageService.showMessage('Member Edited!', `You successfully edited ${this.memberForm.getRawValue().MemberName}!`, 'success');\r\n            this.exitModal();\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      this.memberForm.markAllAsTouched();\r\n      this.memberForm.markAsDirty();\r\n      this.messageService.showMessage('Error', 'Please fill out whole form before submitting', 'error');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".blur {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(4px);\r\n  background:\r\n\t\trgba(0, 0, 0, 0.66)\r\n\t\tno-repeat\r\n\t\t0 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1000;\r\n}\r\n\r\n.panel {\r\n  width: 35vw;\r\n  height: fit-content;\r\n  background-color: white;\r\n  border: 1px solid gray;\r\n  border-radius: .75rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.panel-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid gray;\r\n  padding: 0 1rem;\r\n  background-color: #F7F7F7;\r\n\r\n  div {\r\n    cursor: pointer;\r\n  }\r\n\r\n  div:hover {\r\n    color:#E66360;\r\n  }\r\n}\r\n\r\n.panel-content {\r\n  padding: 1rem;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n}\r\n\r\nform > input:last-of-type {\r\n  display: block;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.validation-error {\r\n  color: #cc2d24;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.input-error {\r\n  background-color: rgba(230, 99, 96, 0.2);\r\n}\r\n\r\ninput {\r\n  border-radius: 0.25rem;\r\n}\r\n\r\ninput[type=text], input[type=tel], input[type=email] {\r\n  padding: 0.5rem;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  align-content: center;\r\n  justify-content: space-evenly;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .panel {\r\n    width: 85vw;\r\n    height: fit-content;\r\n  }\r\n}\r\n",
                    "styleUrl": "./add-member.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"blur\">\n  <div class=\"panel fade-in\">\n    <div class=\"panel-header\">\n      <h2>{{ action }} Member</h2>\n      <div (click)=\"exitModal()\">&#10006;</div>\n    </div>\n    <section class=\"panel-content\">\n      <form [formGroup]=\"memberForm\">\n        <label class=\"form-label-required\" for=\"MemberName\">Member Name</label>\n        <input type=\"text\"\n               formControlName=\"MemberName\"\n               placeholder=\"Enter Name of Member here\"\n               [class.input-error]=\"!memberForm.controls['MemberName'].valid && memberForm.controls['MemberName'].touched\">\n        <div *ngIf=\"!memberForm.controls['MemberName'].valid && memberForm.controls['MemberName'].touched\"\n           class=\"validation-error\">Provide a Member Name</div>\n        <label class=\"form-label-required\" for=\"MemberEmail\">Member Email</label>\n        <input type=\"email\"\n               formControlName=\"MemberEmail\"\n               placeholder=\"Enter Member Email here\"\n               [class.input-error]=\"!memberForm.controls['MemberEmail'].valid && memberForm.controls['MemberEmail'].touched\">\n        <div *ngIf=\"!memberForm.controls['MemberEmail'].valid && memberForm.controls['MemberEmail'].touched\"\n             class=\"validation-error\">Provide a Member Email</div>\n        <label class=\"form-label-required\" for=\"MemberPhone\">Member Phone Number</label>\n        <input type=\"tel\"\n               formControlName=\"MemberPhone\"\n               placeholder=\"Enter Member Phone here\"\n               [class.input-error]=\"!memberForm.controls['MemberPhone'].valid && memberForm.controls['MemberPhone'].touched\">\n        <div *ngIf=\"!memberForm.controls['MemberPhone'].valid && memberForm.controls['MemberPhone'].touched\"\n             class=\"validation-error\">Provide a Phone Number</div>\n        <input type=\"submit\"\n               value=\"Submit Member\"\n               (click)=\"onSubmit()\">\n      </form>\n    </section>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b750a7b2c0371cbac38bea17546a76b9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loggedIn",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Message",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "showMessage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "closeMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToLogInStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToToast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { trigger, style, animate, transition, state } from '@angular/animations';\r\n\r\nimport { Message } from './shared/components/message/Message';\r\nimport { MessageService } from './shared/components/message/message.service';\r\nimport { OrganizationService } from './services/organization.service';\r\nimport { LoginService } from './login/login.service';\r\nimport { User } from './models/user.interface';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n  animations: [\r\n    trigger(\r\n      'fade',\r\n      [\r\n        transition(\r\n          ':leave',\r\n          [\r\n            style({ opacity: 1 }),\r\n            animate('500ms ease-in',\r\n                    style({ opacity: 0 }))\r\n          ]\r\n        )\r\n      ]\r\n    )\r\n  ]\r\n})\r\nexport class AppComponent implements OnInit {\r\n  showMessage: boolean = false;\r\n  message: Message;\r\n  loggedIn: boolean = false;\r\n  user: User;\r\n\r\n  constructor(private readonly organizationService: OrganizationService,\r\n              private readonly messageService: MessageService,\r\n              private readonly loginService: LoginService) { }\r\n\r\n  ngOnInit() {\r\n    this.organizationService.getOrganizations();\r\n    this.subscribeToToast();\r\n    this.subscribeToLogInStatus();\r\n  }\r\n\r\n  closeMessage() {\r\n    this.showMessage = false;\r\n  }\r\n\r\n  subscribeToLogInStatus() {\r\n    this.loginService.userResponse$.subscribe((res) => {\r\n      if (res?.id && res?.name && res?.username) {\r\n        this.loggedIn = true;\r\n        this.user = res;\r\n      } else {\r\n        this.loggedIn = false;\r\n        this.user = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  subscribeToToast() {\r\n    this.messageService.message$.subscribe(message => {\r\n      if (message) {\r\n        this.message = message;\r\n        this.showMessage = true;\r\n        setTimeout(() => {\r\n          this.showMessage = false;\r\n        }, message.timeout);\r\n      } else {\r\n        this.showMessage = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#wrapper {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "organizationService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "organizationService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div id=\"wrapper\">\r\n  <app-nav *ngIf=\"loggedIn\"\r\n           [user]=\"user\"></app-nav>\r\n  <app-message *ngIf=\"showMessage\"\r\n               [@fade]\r\n               [message]=\"message\"\r\n               (closeMessage)=\"closeMessage()\"></app-message>\r\n  <app-main></app-main>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ChartersComponent",
            "id": "component-ChartersComponent-23c6ae2b130ffa5c92a1b95d71f15c1f",
            "file": "src/app/charters/charters.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-charters",
            "styleUrls": [
                "./charters.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./charters.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "charters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Charter[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "charters$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Charter[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "deleteHeader",
                    "defaultValue": "'Delete Group'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "deleteMessage",
                    "defaultValue": "'Are you sure you want to delete this group?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "filteredCharters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Charter[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "fishingOrgs",
                    "defaultValue": "['Deep Sea', 'River', 'Lake', 'Small Creek', 'Ice', 'Inshore']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "groupIdDelete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "noChartersInSearch",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "orgFilterName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "orgName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "searchValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showCharterModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "showDeleteModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addCharter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterByOrg",
                    "args": [
                        {
                            "name": "orgName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orgName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideCharterModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resolveDelete",
                    "args": [
                        {
                            "name": "shouldDelete",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shouldDelete",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollToTop",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchCharters",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDeleteModal",
                    "args": [
                        {
                            "name": "group",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "Charter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToRouteParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Charter } from '../models/Charter';\nimport { MessageService } from '../shared/components/message/message.service';\nimport { GroupService } from '../services/group.service';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-charters',\n  templateUrl: './charters.component.html',\n  styleUrls: ['./charters.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ChartersComponent implements OnInit, OnDestroy {\n\n  ngDestroyed$: Subject<boolean> = new Subject();\n  orgName: string;\n  charters: Charter[];\n  charters$: Observable<Charter[]>;\n  filteredCharters: Charter[];\n  showCharterModal: boolean = false;\n  fishingOrgs = ['Deep Sea', 'River', 'Lake', 'Small Creek', 'Ice', 'Inshore'];\n  deleteHeader: string = 'Delete Group';\n  deleteMessage: string = 'Are you sure you want to delete this group?'\n  showDeleteModal: boolean = false;\n  groupIdDelete: number;\n  noChartersInSearch: boolean = false;\n  searchValue: string = '';\n  orgFilterName: string = '';\n  edit: boolean;\n\n  constructor(private readonly groupService: GroupService,\n              private readonly messageService: MessageService,\n              private readonly route: ActivatedRoute,\n              private readonly router: Router) { }\n\n  ngOnInit(): void {\n    this.groupService.getAllCharters();\n    this.charters$ = this.groupService.charters$;\n    this.subscribeToRouteParams();\n  }\n\n  ngOnDestroy() {\n    this.ngDestroyed$.next();\n  }\n\n  searchCharters(event) {\n    this.searchValue = event?.target?.value;\n  }\n\n  filterByOrg(orgName: string) {\n    this.orgFilterName = orgName;\n    if (orgName) {\n      this.router.navigate(['/charters'], { queryParams: { filterId: orgName } });\n    } else {\n      this.router.navigate(['/charters']);\n    }\n  }\n\n  clearFilters() {\n    this.orgFilterName = '';\n    this.searchValue = '';\n  }\n\n  addCharter() {\n    this.showCharterModal = true;\n  }\n\n  hideCharterModal() {\n    this.showCharterModal = false;\n  }\n\n  setDeleteModal(group: Charter) {\n    this.showDeleteModal = true;\n    this.deleteMessage = `Are you sure you want to delete ${group.GroupName}?`\n    this.groupIdDelete = group.GroupId;\n  }\n\n  scrollToTop() {\n    (function smoothScroll() {\n      let currentScroll = document.documentElement.scrollTop || document.body.scrollTop;\n      if (currentScroll > 0) {\n        window.requestAnimationFrame(smoothScroll);\n        window.scrollTo(0, currentScroll - (currentScroll / 8));\n      }\n    })();\n  }\n\n  resolveDelete(shouldDelete: boolean) {\n    if (shouldDelete) {\n      this.groupService.deleteCharterById(this.groupIdDelete).pipe(takeUntil(this.ngDestroyed$)).subscribe(\n        () => {\n          this.groupService.getAllCharters();\n          this.scrollToTop();\n          this.messageService.showMessage('Charter Deleted', 'You have successfully deleted a charter', 'success');\n        }\n      );\n    }\n    this.showDeleteModal = false;\n  }\n\n private subscribeToRouteParams() {\n    this.route.queryParams.pipe(takeUntil(this.ngDestroyed$)).subscribe((params) => {\n        if (params?.filterId) {\n          this.filterByOrg(params.filterId);\n          setTimeout(() => {\n            const selectBox: HTMLSelectElement = document.getElementById('orgFilter') as HTMLSelectElement;\n            selectBox.value = params.filterId;\n          }, 100);\n        }\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".top-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\nsection > button {\r\n  background-color: #869d7a;\r\n  color: white;\r\n}\r\n\r\ndiv > button {\r\n  border: 2px solid #F26F6A;\r\n}\r\n\r\ndiv > input {\r\n  height: 2rem;\r\n  font-size: 1rem;\r\n  border-radius: .25rem;\r\n  margin-right: 1rem;\r\n}\r\n\r\nsection > div {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.org-filter {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.filter-section {\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n}\r\n\r\n.filter-controls {\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n}\r\n\r\n.filter-section > button {\r\n  margin-top: 1rem;\r\n  background-color: #F26F6A;\r\n  color: black;\r\n  display: inline;\r\n}\r\n\r\n#orgFilter {\r\n  height: 2rem;\r\n}\r\n\r\n@media (max-width: 481px) {\r\n\r\n  h1{\r\n    margin-top: 0;\r\n  }\r\n\r\n  section.top-container {\r\n    padding-bottom: 1rem;\r\n\r\n    button {\r\n      align-self: flex-end;\r\n      margin-top: 1rem;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./charters.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-add-charter *ngIf=\"showCharterModal\"\n                 (modalClose)=\"hideCharterModal()\"></app-add-charter>\n<app-confirmation *ngIf=\"showDeleteModal\"\n                  [panelHeader]=\"deleteHeader\"\n                  [message]=\"deleteMessage\"\n                  (resolve)=\"resolveDelete($event)\"></app-confirmation>\n<ng-container *ngIf=\"charters$ | async | charterSearch: searchValue | orgFilter: orgFilterName as charters; else isLoading\">\n  <section class=\"top-container\">\n    <h1>Charters <span>({{ charters?.length }})</span></h1>\n    <section class=\"filter-section\">\n      <div class=\"filter-controls\">\n        <input type=\"search\"\n                placeholder=\"Search Charters\"\n                [value]=\"searchValue\"\n                (input)=\"searchCharters($event)\"/>\n        <label *ngIf=\"searchValue !== ''\">\n          Showing Results for: <em>{{ searchValue }}</em>\n        </label>\n      </div>\n      <div class=\"org-filter\">\n        <label class=\"form-label\">Filter by Type of Fishing</label>\n        <select id=\"orgFilter\" name=\"orgName\" value=\"orgFilterName\" (change)=\"filterByOrg($event.target.value)\">\n          <option value=\"\">All Charters</option>\n          <option *ngFor=\"let org of fishingOrgs\" value=\"{{ org }}\">{{ org }}</option>\n        </select>\n      </div>\n      <!-- Possible button to clear all filters (search and dropdown)\n        <button *ngIf=\"orgFilterName !== '' || searchValue !== ''\"\n              (click)=\"clearFilters()\">Clear all Filters</button> -->\n    </section>\n    <button (click)=\"addCharter()\">+ Add a Charter</button>\n  </section>\n  <section class=\"charter-container\">\n    <ng-container *ngFor=\"let charter of charters.slice().reverse(); let i = index\">\n      <app-group [group]=\"charter\"\n                 [charterNum]=\"i + 1\"\n                 (deleteCharter)=\"setDeleteModal($event)\"></app-group>\n    </ng-container>\n    <div *ngIf=\"charters?.length === 0\" class=\"no-charters\">\n      No Charters are available.\n    </div>\n  </section>\n</ng-container>\n\n<ng-template #isLoading>\n  <app-loader></app-loader>\n</ng-template>\n"
        },
        {
            "name": "ConfirmationComponent",
            "id": "component-ConfirmationComponent-fcb2df72b0e5b28189cd857bc32928c1",
            "file": "src/app/shared/components/confirmation/confirmation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirmation",
            "styleUrls": [
                "./confirmation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./confirmation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "panelHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "resolve",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onReject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResolve",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-confirmation',\n  templateUrl: './confirmation.component.html',\n  styleUrls: ['./confirmation.component.scss']\n})\nexport class ConfirmationComponent {\n\n  @Input() panelHeader: string;\n  @Input() message: string;\n  @Output() resolve = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  onResolve() {\n    this.resolve.emit(true)\n  }\n\n  onReject() {\n    this.resolve.emit(false);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".blur {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(4px);\r\n  background:\r\n\t\trgba(0, 0, 0, 0.66)\r\n\t\tno-repeat\r\n\t\t0 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1000;\r\n}\r\n\r\n.panel {\r\n  width: 50vw;\r\n  height: fit-content;\r\n  background-color: white;\r\n  border: 1px solid gray;\r\n  border-radius: .75rem;\r\n  overflow: hidden;\r\n}\r\n\r\n.panel-header {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid gray;\r\n  padding: 0 1rem;\r\n  background-color: #F7F7F7;\r\n\r\n  div {\r\n    cursor: pointer;\r\n  }\r\n\r\n  div:hover {\r\n    color:#E66360;\r\n  }\r\n}\r\n\r\n.panel-content {\r\n  padding: 1rem;\r\n}\r\n\r\n.panel-footer {\r\n  background-color: #F7F7F7;\r\n  border-top: 1px solid gray;\r\n  padding: 1rem;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.panel-footer > button:last-of-type {\r\n  background-color: #869d7a;\r\n  color: white;\r\n  margin-left: 1rem;\r\n}\r\n\r\n@media (max-width: 481px) {\r\n  .panel {\r\n    width: 85vw;\r\n    height: fit-content;\r\n  }\r\n}\r\n",
                    "styleUrl": "./confirmation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "templateData": "<div class=\"blur\">\n  <div class=\"panel fade-in\">\n    <section class=\"panel-header\">\n      <h2>{{ panelHeader }}</h2>\n      <div (click)=\"onReject()\">&#10006;</div>\n    </section>\n    <section class=\"panel-content\">\n      <p>{{ message }}</p>\n    </section>\n    <section class=\"panel-footer\">\n      <button (click)=\"onReject()\">No</button>\n      <button (click)=\"onResolve()\">Yes</button>\n    </section>\n  </div>\n</div>\n"
        },
        {
            "name": "FishingOrgComponent",
            "id": "component-FishingOrgComponent-44e47a6ff7c32d8589f0b3fc1eeeff5c",
            "file": "src/app/fishing-org/fishing-org.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fishing-org",
            "styleUrls": [
                "./fishing-org.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fishing-org.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "organizations$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<FishingOrganization[]>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\nimport { FishingOrganization } from '../models/FishingOrganization';\nimport { OrganizationService } from '../services/organization.service';\n\nimport { Observable, Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-fishing-org',\n  templateUrl: './fishing-org.component.html',\n  styleUrls: ['./fishing-org.component.scss']\n})\nexport class FishingOrgComponent implements OnInit {\n  organizations$: Observable<FishingOrganization[]>;\n\n  ngDestroyed$ = new Subject();\n\n  constructor(private readonly organizationService: OrganizationService) { }\n\n  ngOnInit() {\n    this.organizations$ = this.organizationService.organizations$;\n  }\n\n  ngOnDestroy() {\n    this.ngDestroyed$.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".flex-container {\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n}\r\n\r\nsection {\r\n  width: 33%;\r\n}\r\n\r\nh1 {\r\n  padding-left: 1rem;\r\n}\r\n\r\n@media (min-width: 481px) and  (max-width: 768px) {\r\n  section {\r\n    width: 50%;\r\n    max-width: initial;\r\n    justify-content: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  h1 {\r\n    margin: 0;\r\n  }\r\n\r\n  section {\r\n    width: 100%;\r\n    max-width: initial;\r\n    justify-content: center;\r\n  }\r\n}\r\n",
                    "styleUrl": "./fishing-org.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "organizationService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "organizationService",
                        "type": "OrganizationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Home</h1>\n<p class=\"explanation-box\">\n  Choose a Type of fishing below to get started! Or use the navigation bar\n  at the top of the page to view All Charters.\n</p>\n<div class=\"flex-container\" *ngIf=\"organizations$ | async as organizations; else isLoading\">\n  <section *ngFor=\"let org of organizations\">\n    <app-organization [org]=\"org\"></app-organization>\n  </section>\n</div>\n\n<ng-template #isLoading>\n  <app-loader></app-loader>\n</ng-template>\n"
        },
        {
            "name": "GroupComponent",
            "id": "component-GroupComponent-a16c97c46d0175def2e55105b7a853da",
            "file": "src/app/charters/group/group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group",
            "styleUrls": [
                "./group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "charterNum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Charter"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteCharter",
                    "defaultValue": "new EventEmitter<Charter>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "noAvailability",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showMemberModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideMemberModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "memberModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navToGroupDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAvailableText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { Charter } from 'src/app/models/Charter';\nimport { GroupService } from 'src/app/services/group.service';\n\n@Component({\n  selector: 'app-group',\n  templateUrl: './group.component.html',\n  styleUrls: ['./group.component.scss']\n})\nexport class GroupComponent implements OnInit {\n\n  @Input() group: Charter;\n  @Input() charterNum: number;\n  @Output() deleteCharter = new EventEmitter<Charter>();\n\n  availableText: string;\n  noAvailability: boolean;\n  showMemberModal: boolean = false;\n\n  constructor(private readonly groupService: GroupService,\n              private readonly router: Router,\n              private readonly route: ActivatedRoute) { }\n\n  ngOnInit() {\n    this.setAvailableText();\n  }\n\n  setAvailableText() {\n    const totalMembers = this.group.Members.length;\n    const maxMembers = this.group.MaxGroupSize;\n\n    if (totalMembers >= maxMembers) {\n      this.noAvailability = true;\n      this.availableText = `${totalMembers}/${maxMembers} | No Spots Available`;\n    } else {\n      this.noAvailability = false;\n      this.availableText = `${totalMembers}/${maxMembers} | Spots Available`;\n    }\n  }\n\n  deleteGroup() {\n    this.deleteCharter.emit(this.group);\n  }\n\n  navToGroupDetails() {\n    this.groupService.updateSelectedGroup(this.group);\n    this.router.navigate(['details'], { relativeTo: this.route, queryParams: { groupId: this.group.GroupId } });\n  }\n\n  memberModal() {\n    this.showMemberModal = true;\n  }\n\n  hideMemberModal() {\n    this.showMemberModal = false;\n    this.groupService.getAllCharters();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div.container {\r\n  border: 1px gray solid;\r\n  margin-bottom: 1rem;\r\n  border-radius: 0.25rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  box-shadow: 0 3px 6px rgb(0 0 0 / 30%);\r\n}\r\n\r\nheader {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  background-color: #F7F7F7;\r\n  border-bottom: 1px gray solid;\r\n}\r\n\r\nheader > p {\r\n  padding: 0 1rem;\r\n}\r\n\r\nheader > p:last-of-type {\r\n  color: #869d7a;\r\n  font-weight: bold;\r\n}\r\n\r\nsection.content {\r\n  padding: 0 1rem 1rem 1rem;\r\n  background-color: white;\r\n}\r\n\r\n.button-group {\r\n  display: flex;\r\n}\r\n\r\n.register-button {\r\n  margin-right: 1rem;\r\n  color: white;\r\n  background-color: #869d7a;\r\n}\r\n\r\n.delete-button {\r\n  margin-left: auto;\r\n  background-color: #F26F6A;\r\n}\r\n\r\n.no-avail {\r\n  color: #E66360 !important;\r\n}\r\n\r\n@media (max-width: 481px) {\r\n  .button-group {\r\n    flex: 1 1 100%;\r\n    flex-wrap: wrap;\r\n\r\n    button {\r\n      width: 100%;\r\n    }\r\n  }\r\n\r\n  .register-button {\r\n    margin-right: initial;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  .delete-button {\r\n    margin-left: initial;\r\n    margin-top: 0.5rem;\r\n  }\r\n\r\n  header {\r\n    flex-direction: column;\r\n  }\r\n\r\n  header > p:last-of-type {\r\n    margin-top: 0;\r\n  }\r\n}\r\n",
                    "styleUrl": "./group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-add-member *ngIf=\"showMemberModal\"\n                [addGroupId]=\"group.GroupId\"\n                (modalClose)=\"hideMemberModal()\"></app-add-member>\n<div class=\"container\">\n  <header>\n    <p>Charter #{{ charterNum }} &#8212; <em>{{ group.OrganizationName }}</em></p>\n    <p [class.no-avail]=\"noAvailability\">{{ availableText }}</p>\n  </header>\n  <section class=\"content\">\n    <h2>{{ group.GroupName }}</h2>\n    <p>\n      This charter has a captain by the name of {{ group.SponsorName }} their phone number\n      is {{ group.SponsorPhone | phone }}.  If you cannot get ahold of them via phone, you can use\n      {{ group.SponsorEmail }}.\n    </p>\n    <div class=\"button-group\">\n      <button *ngIf=\"!noAvailability\" class=\"register-button\" (click)=\"memberModal()\">Register</button>\n      <button class=\"details-button\" (click)=\"navToGroupDetails()\">Charter Details</button>\n      <button class=\"delete-button\" (click)=\"deleteGroup()\">Delete</button>\n    </div>\n  </section>\n</div>\n"
        },
        {
            "name": "GroupDetailsComponent",
            "id": "component-GroupDetailsComponent-92e36fab907cb7b0847ecdfb40390de2",
            "file": "src/app/charters/group-details/group-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-group-details",
            "styleUrls": [
                "./group-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./group-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "charter$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Charter>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "edit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isFull",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showGroupModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showMemberModal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkIsFull",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editCharter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideGroupModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideMemberModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navToCharters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToRouteParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\n\nimport { Charter } from '../../models/Charter';\nimport { GroupService } from '../../services/group.service';\n\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-group-details',\n  templateUrl: './group-details.component.html',\n  styleUrls: ['./group-details.component.scss']\n})\nexport class GroupDetailsComponent implements OnInit, OnDestroy {\n\n  ngDestroyed$ = new Subject();\n  charter$: Observable<Charter>;\n  showMemberModal: boolean;\n  showGroupModal: boolean;\n  availMessage: string;\n  edit: boolean;\n  groupId: number;\n  isFull: boolean;\n\n  constructor(private readonly groupService: GroupService,\n              private readonly route: ActivatedRoute,\n              private readonly router: Router) { }\n\n  ngOnInit(): void {\n    this.subscribeToRouteParams();\n    this.charter$ = this.groupService.charterById$;\n    this.checkIsFull();\n  }\n\n  ngOnDestroy() {\n    this.ngDestroyed$.next();\n    this.groupService.selectedGroup.next(null);\n  }\n\n  addNewMember() {\n    this.showMemberModal = true;\n  }\n\n  hideMemberModal() {\n    this.showMemberModal = false;\n    this.groupService.getCharterById(this.groupId);\n  }\n\n  hideGroupModal() {\n    this.showGroupModal = false;\n    this.groupService.getCharterById(this.groupId);\n  }\n\n  editCharter() {\n    this.edit = true;\n    this.showGroupModal = true;\n  }\n\n  checkIsFull() {\n    if (document.querySelector('header > p').classList.contains('no-avail')) {\n      this.isFull = true;\n    } else {\n      this.isFull = false;\n    }\n  }\n\n  navToCharters() {\n    this.router.navigate(['/charters']);\n  }\n\n  private subscribeToRouteParams() {\n    this.route.queryParams.pipe(takeUntil(this.ngDestroyed$)).subscribe((params: Params) => {\n      this.groupId = params.groupId;\n      this.groupService.getCharterById(params.groupId);\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "header {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\na {\r\n  cursor: pointer;\r\n  margin-bottom: 0.5rem;\r\n  display: inline-block;\r\n}\r\n\r\na:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\nh2 {\r\n  margin: 0.5rem 0;\r\n}\r\n\r\np {\r\n  color: #869d7a;\r\n  font-weight: bold;\r\n}\r\n\r\n.no-avail {\r\n  color: #E66360 !important;\r\n}\r\n\r\ndiv > button:last-of-type {\r\n  margin-left: 1rem;\r\n}\r\n\r\nsection {\r\n  height: 100%;\r\n}\r\n\r\n.no-members {\r\n  border: 2px solid gray;\r\n  padding: 1rem;\r\n  border-radius: .25rem;\r\n  background-color: white;\r\n  box-shadow: 0 3px 6px rgb(0 0 0 / 30%);\r\n}\r\n\r\n.member-message {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.member-flex {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-content: stretch;\r\n}\r\n\r\ndiv > button:first-of-type {\r\n  background-color: #869d7a;\r\n  color: white;\r\n}\r\n\r\n.title > div {\r\n  border-bottom: solid gray 1px;\r\n}\r\n\r\nli {\r\n  list-style-position: inside;\r\n}\r\n\r\n@media (max-width: 481px) {\r\n  h1, p {\r\n    margin: .5rem 0;\r\n  }\r\n\r\n  a {\r\n    margin-top: 0.5rem;\r\n  }\r\n\r\n  div > button:last-of-type {\r\n    margin: initial;\r\n  }\r\n\r\n  header {\r\n    div.buttons {\r\n      display: flex;\r\n      flex-flow: row nowrap;\r\n      width: 100%;\r\n\r\n      button:first-of-type {\r\n        margin-right: 1rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (min-width: 481px) and (max-width: 768px) {\r\n  .buttons {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n\r\n  h1, p {\r\n    padding: 0 0.5rem;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./group-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<section *ngIf=\"charter$ | async as charter; else isLoading\">\n  <app-add-member *ngIf=\"showMemberModal\"\n                [addGroupId]=\"charter?.GroupId\"\n                (modalClose)=\"hideMemberModal()\"></app-add-member>\n  <app-add-charter *ngIf=\"showGroupModal\"\n                   [currentValue]=\"charter\"\n                   [isEdit]=\"edit\"\n                   (modalClose)=\"hideGroupModal()\"></app-add-charter>\n  <header>\n    <h1>{{ charter?.GroupName }} &#8212; {{ charter.OrganizationName }}</h1>\n    <p [ngClass]=\"charter | spotsAvailable: true\">{{ charter | spotsAvailable }}</p>\n    <div class=\"buttons\">\n      <button *ngIf=\"!isFull\" (click)=\"addNewMember()\">Add New Member</button>\n      <button (click)=\"editCharter()\">Edit Charter</button>\n    </div>\n  </header>\n  <a (click)=\"navToCharters()\">&#8592; Back to Charters</a>\n  <h2>Member List</h2>\n  <div class=\"member-message\">\n    <h3 *ngIf=\"charter?.Members?.length === 0\" class=\"no-members\">\n      There are no Members, please add some!\n    </h3>\n  </div>\n  <app-member *ngFor=\"let member of charter?.Members; let i = index\"\n            [member]=\"member\"\n            [groupId]=\"charter.GroupId\"\n            [index]=\"i + 1\"></app-member>\n</section>\n\n<ng-template #isLoading>\n  <app-loader></app-loader>\n</ng-template>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-ad1c3e0bb4324c33f8d93dbe5a8f84ba",
            "file": "src/app/shared/components/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.scss']\n})\nexport class LoaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loader {\r\n  border: 1rem solid #f3f3f3;\r\n  border-top: 1rem solid #869d7a;\r\n  border-radius: 50%;\r\n  width: 7.5rem;\r\n  height: 7.5rem;\r\n  animation: spin 2s linear infinite;\r\n}\r\n\r\n.blur {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  backdrop-filter: blur(4px);\r\n  background:\r\n\t\trgba(0, 0, 0, 0.66)\r\n\t\tno-repeat\r\n\t\t0 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 1000;\r\n}\r\n\r\np {\r\n  color: white;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"blur\">\n  <div class=\"loader\"></div>\n  <p>Loading...</p>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-1d45cb5b6b7c34ccb29b6e264c440e4c",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "buildLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "form",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { MessageService } from '../shared/components/message/message.service';\r\nimport { LoginService } from './login.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n\r\n  loginForm: FormGroup;\r\n  loginError: boolean = false;\r\n  ngDestroyed$: Subject<boolean> = new Subject();\r\n\r\n  constructor(private readonly fb: FormBuilder,\r\n              private readonly messageService: MessageService,\r\n              private readonly loginService: LoginService,\r\n              private readonly router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.buildLoginForm();\r\n    this.form();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngDestroyed$.next();\r\n  }\r\n\r\n  buildLoginForm() {\r\n    this.loginForm = this.fb.group({\r\n      username: [null, Validators.required],\r\n      password: [null, Validators.required]\r\n    });\r\n  }\r\n\r\n  registerUser() {\r\n    this.router.navigate(['/login/register']);\r\n  }\r\n\r\n  form() {\r\n    this.loginForm.valueChanges.pipe(takeUntil(this.ngDestroyed$)).subscribe( () => {\r\n      if (this.loginError) {\r\n        this.loginError = false;\r\n      }\r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm.valid) {\r\n      this.loginService.requestLogin(this.loginForm.getRawValue());\r\n      this.loginService.userResponse$.pipe(takeUntil(this.ngDestroyed$)).subscribe((res) => {\r\n        if (res?.id && res?.name && res?.username) {\r\n          this.router.navigate(['/home']);\r\n        } else {\r\n          setTimeout(() => {\r\n            this.loginError = true;\r\n          }, 100);\r\n        }\r\n      });\r\n    } else {\r\n      this.loginForm.markAllAsTouched();\r\n      this.messageService.showMessage('Error', 'Please provide values for all fields', 'error');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".validation-error {\r\n  color: #cc2d24;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.input-error {\r\n  background-color: rgba(230, 99, 96, 0.2);\r\n}\r\n\r\n.panel {\r\n  width: 35vw;\r\n  height: fit-content;\r\n  background-color: white;\r\n  border: 1px solid gray;\r\n  border-radius: .75rem;\r\n  overflow: hidden;\r\n  margin: auto;\r\n  padding: 1rem;\r\n  margin-bottom: 1rem;\r\n  box-shadow: 0 3px 6px rgb(0 0 0 / 30%);\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  align-content: center;\r\n  justify-content: space-evenly;\r\n}\r\n\r\ninput[type=text], input[type=password] {\r\n  height: 2rem;\r\n}\r\n\r\nlabel {\r\n  margin-top: 1rem;\r\n}\r\n\r\ninput[type=submit] {\r\n  margin-top: 1rem;\r\n  background-color: #869d7a;\r\n  color: white;\r\n  font-weight: bold;\r\n}\r\n.error {\r\n  background-color: rgb(199, 55, 55);\r\n  text-align: center;\r\n  color: white;\r\n}\r\n\r\nbutton {\r\n  margin-top: 1rem;\r\n  width: 11.25rem;\r\n  align-self: center;\r\n}\r\n\r\nheader {\r\n  border-bottom: 2px gray solid;\r\n  background-color: #f2f2f2;\r\n  padding: 1rem;\r\n  margin: -1rem -1rem 1rem -1rem;\r\n  font-weight: bold;\r\n  text-align: center;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .panel{\r\n    width: fit-content;\r\n  }\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<section class=\"panel\">\r\n  Welcome to Fishing Charters Manager! Please Log In or register if you are new here!\r\n</section>\r\n<section class=\"panel\">\r\n  <header>\r\n    Login\r\n  </header>\r\n  <form [formGroup]=\"loginForm\">\r\n    <label class=\"form-label-required\" for=\"username\">Username</label>\r\n    <input type=\"text\"\r\n            formControlName=\"username\"\r\n            placeholder=\"Enter Username\"\r\n            [class.input-error]=\"!loginForm.controls['username'].valid && loginForm.controls['username'].touched\">\r\n    <div *ngIf=\"!loginForm.controls['username'].valid && loginForm.controls['username'].touched\"\r\n        class=\"validation-error\">Provide a Username</div>\r\n    <label class=\"form-label-required\" for=\"password\">Password</label>\r\n    <input type=\"password\"\r\n            formControlName=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            [class.input-error]=\"!loginForm.controls['password'].valid && loginForm.controls['password'].touched\">\r\n    <div *ngIf=\"!loginForm.controls['password'].valid && loginForm.controls['password'].touched\"\r\n          class=\"validation-error\">Provide a Password</div>\r\n    <input type=\"submit\"\r\n            value=\"Login\"\r\n            (click)=\"onSubmit()\">\r\n  </form>\r\n  <button (click)=\"registerUser()\">Register</button>\r\n</section>\r\n<section *ngIf=\"loginError\" class=\"panel error\">\r\n  Username or Password is incorrect, please try again.\r\n</section>\r\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-b3b0eabcdb5ad8691e51039a11c671a6",
            "file": "src/app/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "./main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.scss']\r\n})\r\nexport class MainComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "main {\r\n  padding: 1rem;\r\n  max-width: 75rem;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n",
                    "styleUrl": "./main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<main>\r\n  <router-outlet></router-outlet>\r\n</main>\r\n"
        },
        {
            "name": "MemberComponent",
            "id": "component-MemberComponent-184ee4f63f189a99fe09b109ccc97be1",
            "file": "src/app/charters/group-details/member/member.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-member",
            "styleUrls": [
                "./member.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./member.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groupId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number"
                },
                {
                    "name": "member",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Member"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "deleteHeader",
                    "defaultValue": "'Delete Member'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "deleteMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "edit",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showDeleteModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "showMemberModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editMember",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideMemberModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resolveDelete",
                    "args": [
                        {
                            "name": "shouldDelete",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shouldDelete",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core';\n\nimport { MessageService } from 'src/app/shared/components/message/message.service';\nimport { GroupService } from 'src/app/services/group.service';\nimport { Member } from '../../../models/Member';\nimport { MemberService } from '../../../services/member.service';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-member',\n  templateUrl: './member.component.html',\n  styleUrls: ['./member.component.scss']\n})\nexport class MemberComponent implements OnInit, OnDestroy {\n\n  @Input() member: Member;\n  @Input() groupId: string;\n  @Input() index: number;\n  showMemberModal: boolean = false;\n  showDeleteModal: boolean = false;\n  deleteHeader: string = 'Delete Member';\n  deleteMessage: string;\n  ngDestroyed$ = new Subject();\n  edit: boolean = false;\n\n\n  constructor(private readonly memberService: MemberService,\n              private readonly groupService: GroupService,\n              private readonly messageService: MessageService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnDestroy() {\n    this.ngDestroyed$.next();\n  }\n\n  editMember() {\n    this.edit = true;\n    this.showMemberModal = true;\n  }\n\n  hideMemberModal() {\n    this.showMemberModal = false;\n    this.edit = false;\n    this.groupService.getCharterById(this.groupId);\n  }\n\n  deleteMember() {\n    this.showDeleteModal = true;\n    this.deleteMessage = `Are you sure you want to remove ${this.member?.MemberName}`\n  }\n\n  resolveDelete(shouldDelete: boolean) {\n    if (shouldDelete) {\n      this.memberService.deleteMemberFromGroup(this.groupId, this.member.MemberId).pipe(takeUntil(this.ngDestroyed$)).subscribe(\n        () => {\n          this.messageService.showMessage('Member Deleted!', 'You have successfully deleted a member!', 'success')\n          this.groupService.getCharterById(this.groupId);\n        }\n        //TODO: Add Error Hanlding\n      );\n    }\n    this.showDeleteModal = false;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel-content {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  flex-grow: 1;\r\n}\r\n\r\n.panel {\r\n  padding: 1rem 1rem 1rem 0;\r\n  margin-bottom: 1rem;\r\n  box-shadow: 0 3px 6px rgb(0 0 0 / 30%);\r\n  border-radius: .25rem;\r\n  border: 1px solid gray;\r\n  background-color: white;\r\n  display: flex;\r\n  overflow: hidden;\r\n}\r\n\r\n.buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  border-left: gray 1px solid;\r\n  margin: -1rem 0;\r\n}\r\n\r\n.buttons > button:last-of-type {\r\n  background-color: #F26F6A;\r\n}\r\n\r\nbutton {\r\n  margin: 0.75rem 0 0.75rem 1rem;\r\n}\r\n\r\n.member-info {\r\n  padding-left: 1rem;\r\n}\r\n\r\n.number {\r\n  background-color: rgb(75, 75, 75);\r\n  padding: 0 2rem;\r\n  margin: -1rem 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-right: 1px solid gray;\r\n\r\n  div {\r\n    color: white;\r\n    font-weight: bold;\r\n  }\r\n}\r\n\r\nem {\r\n  font-weight: bold;\r\n  font-style: normal;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .panel {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .panel-content {\r\n    flex-direction: column;\r\n  }\r\n\r\n  button:first-of-type {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n  button:last-of-type {\r\n    margin-top: 0.5rem;\r\n  }\r\n\r\n  .member-info {\r\n    padding-top: 1rem;\r\n  }\r\n\r\n  .number {\r\n    margin-right: -1rem;\r\n    height: 2rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./member.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "memberService",
                        "type": "MemberService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-add-member *ngIf=\"showMemberModal\"\r\n                [addGroupId]=\"groupId\"\r\n                [currentValue]=\"member\"\r\n                [isEdit]=\"edit\"\r\n                (modalClose)=\"hideMemberModal()\"></app-add-member>\r\n<app-confirmation *ngIf=\"showDeleteModal\"\r\n                  [panelHeader]=\"deleteHeader\"\r\n                  [message]=\"deleteMessage\"\r\n                  (resolve)=\"resolveDelete($event)\"></app-confirmation>\r\n<div class=\"panel\">\r\n  <div class=\"number\">\r\n    <div>\r\n      {{ index }}\r\n    </div>\r\n  </div>\r\n  <section class=\"panel-content\">\r\n    <div class=\"member-info\">\r\n      <p><em>Name:</em> {{ member.MemberName }}</p>\r\n      <p><em>Email:</em> {{ member.MemberEmail }}</p>\r\n      <p><em>Phone:</em> {{ member.MemberPhone | phone}}</p>\r\n    </div>\r\n    <div class=\"buttons\">\r\n      <button (click)=\"editMember()\">Edit Member</button>\r\n      <button (click)=\"deleteMember()\">Delete</button>\r\n    </div>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "MessageComponent",
            "id": "component-MessageComponent-b199e6b60243d0a3451736c0499b3ae4",
            "file": "src/app/shared/components/message/message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-message",
            "styleUrls": [
                "./message.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./message.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Message"
                }
            ],
            "outputsClass": [
                {
                    "name": "closeMessage",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "messageStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSeverity",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { Message } from './Message';\n\n@Component({\n  selector: 'app-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss']\n})\nexport class MessageComponent implements OnInit {\n\n  @Input() message: Message\n  @Output() closeMessage = new EventEmitter<boolean>();\n  messageStyle: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.setSeverity();\n  }\n\n  setSeverity() {\n    switch (this.message.severity) {\n      case 'error':\n        this.messageStyle = 'error';\n        break;\n      case 'success':\n        this.messageStyle = 'success';\n        break;\n      default:\n        this.messageStyle = 'success';\n        break;\n    }\n  }\n\n  onClose() {\n    this.closeMessage.emit(true);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".success > header, .success > header > div {\r\n  background-color: #51c257;\r\n}\r\n\r\n.error > header, .error > header > div {\r\n  background-color: #d62f29;\r\n}\r\n\r\nheader {\r\n  padding: 0 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-weight: bold;\r\n}\r\n\r\nheader > div {\r\n  cursor: pointer;\r\n}\r\n\r\nheader > div:hover {\r\n  color: white;\r\n}\r\n\r\nsection {\r\n  width: 20rem;\r\n  border: 2px solid black;\r\n  border-radius: .5rem;\r\n  position: fixed;\r\n  right: 1rem;\r\n  top: 1rem;\r\n  z-index: 2000;\r\n  overflow: hidden;\r\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;\r\n}\r\n\r\nbutton {\r\n  margin-top: 0.5rem;\r\n}\r\n\r\ndiv {\r\n  padding: 1rem;\r\n  background-color: white;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  section {\r\n    width: calc(100% - 2rem);\r\n  }\r\n}\r\n\r\n@media (min-width: 481px) and (max-width: 768px) {\r\n\r\n}\r\n",
                    "styleUrl": "./message.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section [ngClass]=\"messageStyle\">\n  <header>\n    <p>{{ message?.header }}</p>\n    <div (click)=\"onClose()\">&#10006;</div>\n  </header>\n  <div>\n    {{ message?.message }}\n  </div>\n</section>\n"
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-b779872b36b57d616e6a54eec2b55ad2",
            "file": "src/app/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [
                "./nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "User"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { User } from '../models/user.interface';\r\nimport { MessageService } from '../shared/components/message/message.service';\r\nimport { LoginService } from '../login/login.service';\r\n\r\n@Component({\r\n  selector: 'app-nav',\r\n  templateUrl: './nav.component.html',\r\n  styleUrls: ['./nav.component.scss']\r\n})\r\nexport class NavComponent implements OnInit {\r\n\r\n  @Input() user: User;\r\n\r\n  constructor(private readonly loginService: LoginService,\r\n              private readonly router: Router,\r\n              private readonly messageService: MessageService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  logout() {\r\n    this.loginService.userResponse$.next(null);\r\n    this.router.navigate(['/login']);\r\n    this.messageService.showMessage('Success', 'You have successfully logged out!', 'success');\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: auto;\r\n  height: fit-content;\r\n  display: flex;\r\n  background-color: #222222;\r\n}\r\n\r\nul > li {\r\n  padding: 0.5rem 1rem;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  margin: auto 0;\r\n}\r\n\r\nul > li:first-of-type {\r\n  cursor: default;\r\n}\r\n\r\nli:hover > a {\r\n  text-decoration: underline;\r\n}\r\n\r\nli > a {\r\n  color: white;\r\n  font-size: 1.25rem;\r\n  font-weight: bold;\r\n  text-decoration: none;\r\n\r\n}\r\n\r\n.active {\r\n  background-color: rgb(75, 75, 75);\r\n  border-radius: .25rem;\r\n  a {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\nimg {\r\n  max-width: 5.8rem;\r\n}\r\n\r\nul > li:last-of-type {\r\n  color: white;\r\n  margin-left: auto;\r\n  cursor: default;\r\n}\r\n\r\nbutton {\r\n  margin-left: 1rem;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  ul {\r\n    flex-direction: column;\r\n  }\r\n\r\n  li > a {\r\n    font-size: initial;\r\n  }\r\n\r\n  img {\r\n    max-height: 2rem;\r\n  }\r\n\r\n  ul > li:last-of-type {\r\n    flex: 0 1;\r\n    order: -1;\r\n    margin-left: 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  .active {\r\n    background-color: rgb(75, 75, 75);\r\n  }\r\n}\r\n\r\n@media (min-width: 481px) and (max-width: 768px) {\r\n  li > a {\r\n    font-size: initial;\r\n  }\r\n\r\n  ul > li:last-of-type {\r\n    text-align: center;\r\n  }\r\n\r\n  button {\r\n    margin-left: auto;\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav>\r\n  <ul>\r\n    <li><img src=\"assets/fish-icon.png\" alt=\"Fish\"></li>\r\n    <li routerLink=\"home\" routerLinkActive=\"active\">\r\n      <a>Home</a>\r\n    </li>\r\n    <li routerLink=\"charters\" routerLinkActive=\"active\">\r\n      <a>Charters</a>\r\n    </li>\r\n    <li routerLink=\"about\" routerLinkActive=\"active\">\r\n      <a>About</a>\r\n    </li>\r\n    <li>\r\n      Welcome {{ user.name }}!\r\n      <button (click)=\"logout()\">Logout</button>\r\n    </li>\r\n  </ul>\r\n</nav>\r\n"
        },
        {
            "name": "OrganizationComponent",
            "id": "component-OrganizationComponent-fe8cbf8b6b9de4af59556ba604f4e01f",
            "file": "src/app/fishing-org/organization/organization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-organization",
            "styleUrls": [
                "./organization.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./organization.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "org",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FishingOrganization"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navToGroup",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFishingImages",
                    "args": [
                        {
                            "name": "org",
                            "type": "FishingOrganization",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "org",
                            "type": "FishingOrganization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { FishingOrganization } from 'src/app/models/FishingOrganization';\nimport { GroupService } from 'src/app/services/group.service';\n\n@Component({\n  selector: 'app-organization',\n  templateUrl: './organization.component.html',\n  styleUrls: ['./organization.component.scss']\n})\nexport class OrganizationComponent implements OnInit {\n\n  @Input() org: FishingOrganization;\n\n  constructor(private readonly router: Router,\n              private readonly groupService: GroupService) { }\n\n  ngOnInit(): void {\n    this.setFishingImages(this.org);\n  }\n\n  navToGroup() {\n    this.groupService.filterOrg.next(this.org.OrganizationName);\n    this.router.navigate(['/charters'], { queryParams: { filterId: this.org.OrganizationName}});\n  }\n\n  setFishingImages(org: FishingOrganization) {\n    switch (org.OrganizationId) {\n      case '1':\n        org.imageUrl = 'assets/DeepSea.jpg';\n        break;\n      case '2':\n        org.imageUrl = 'assets/river.jpg';\n        break;\n      case '3':\n        org.imageUrl = 'assets/lake.jpg';\n        break;\n      case '4':\n        org.imageUrl = 'assets/creek.jpg';\n        break;\n      case '5':\n        org.imageUrl = 'assets/ice.jpg';\n        break;\n      case '6':\n        org.imageUrl = 'assets/inshore.jpg';\n        break;\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\r\n  border: 2px solid gray;\r\n  border-radius: 1rem;\r\n  padding: 1rem;\r\n  margin: 1rem;\r\n  background-color: white;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  height: calc(100% - 3.5rem);\r\n  box-shadow: 0 3px 6px rgb(0 0 0 / 30%);\r\n  transition: all 0.4s ease 0s;\r\n}\r\n\r\ndiv:hover {\r\n  transform: scale(1.05);\r\n  transition: all 0.4s ease 0s;\r\n}\r\n\r\nbutton {\r\n  background-color: #869D7A;\r\n  border-radius: 0.25rem;\r\n  height: 2rem;\r\n  color: white;\r\n  margin-top: auto;\r\n}\r\n\r\nimg {\r\n  max-width: calc(100% + 2rem);\r\n  margin: -1rem -1rem 0 -1rem;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  div {\r\n    margin-left: 0;\r\n    margin-right: 0;\r\n  }\r\n\r\n  h2, p {\r\n    margin: .5rem 0\r\n  }\r\n\r\n  img {\r\n    flex: 2 1 100%;\r\n  };\r\n}\r\n",
                    "styleUrl": "./organization.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "groupService",
                        "type": "GroupService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div (click)=\"navToGroup()\">\n  <img [src]=\"org.imageUrl\" />\n  <h2>{{ org.OrganizationName }}</h2>\n  <p>{{ org.Description }}</p>\n  <button>View Available Charters &#8594;</button>\n</div>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-3e56cc578e97f6b9ade95cf517033661",
            "file": "src/app/login/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ngDestroyed$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "buildRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "routeToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { MessageService } from '../../shared/components/message/message.service';\r\nimport { LoginService } from '../login.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit, OnDestroy {\r\n\r\n  registerForm: FormGroup;\r\n  ngDestroyed$ = new Subject();\r\n\r\n  constructor(private readonly fb: FormBuilder,\r\n              private readonly loginService: LoginService,\r\n              private readonly messageService: MessageService,\r\n              private readonly router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.buildRegisterForm();\r\n    this.subscribeToUser();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.ngDestroyed$.next();\r\n  }\r\n\r\n  buildRegisterForm() {\r\n    this.registerForm = this.fb.group({\r\n      name: [null, Validators.required],\r\n      username: [null, Validators.required],\r\n      password: [null, Validators.required]\r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.registerForm.valid) {\r\n      this.loginService.registerUser(this.registerForm.getRawValue());\r\n    } else {\r\n      this.registerForm.markAllAsTouched();\r\n      this.messageService.showMessage('Error', 'Please provide values for all fields', 'error');\r\n    }\r\n  }\r\n\r\n  routeToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  subscribeToUser() {\r\n    this.loginService.userResponse$.pipe(takeUntil(this.ngDestroyed$)).subscribe((user) => {\r\n      if (user?.id && user?.name && user?.username) {\r\n        this.router.navigate(['/home']);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".validation-error {\r\n  color: #cc2d24;\r\n  font-size: 0.875rem;\r\n}\r\n\r\n.input-error {\r\n  background-color: rgba(230, 99, 96, 0.2);\r\n}\r\n\r\n.panel {\r\n  width: 35vw;\r\n  height: fit-content;\r\n  background-color: white;\r\n  border: 1px solid gray;\r\n  border-radius: .75rem;\r\n  overflow: hidden;\r\n  margin: auto;\r\n  padding: 1rem;\r\n  margin-bottom: 1rem;\r\n  box-shadow: 0 3px 6px rgb(0 0 0 / 30%);\r\n  display: flex;\r\n  flex-flow: column wrap;\r\n}\r\n\r\ninput[type=text], input[type=password] {\r\n  height: 2rem;\r\n}\r\n\r\nlabel {\r\n  margin-top: 1rem;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n  align-content: center;\r\n  justify-content: space-evenly;\r\n}\r\n\r\ninput[type=submit] {\r\n  margin-top: 1rem;\r\n  background-color: #869d7a;\r\n  color: white;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\nheader {\r\n  border-bottom: 2px gray solid;\r\n  background-color: #f2f2f2;\r\n  padding: 1rem;\r\n  margin: -1rem -1rem 1rem -1rem;\r\n  font-weight: bold;\r\n  text-align: center;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n}\r\n\r\nbutton {\r\n  width: 11.25rem;\r\n  align-self: center;\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .panel{\r\n    width: fit-content;\r\n  }\r\n\r\n  button {\r\n    margin: 0 auto;\r\n  }\r\n}\r\n",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<section class=\"panel\">\r\n  <header>\r\n    Register\r\n  </header>\r\n  <form [formGroup]=\"registerForm\">\r\n    <label class=\"form-label-required\" for=\"name\">Name</label>\r\n    <input type=\"text\"\r\n            formControlName=\"name\"\r\n            placeholder=\"Enter Name\"\r\n            [class.input-error]=\"!registerForm.controls['name'].valid && registerForm.controls['name'].touched\">\r\n    <div *ngIf=\"!registerForm.controls['name'].valid && registerForm.controls['name'].touched\"\r\n        class=\"validation-error\">Provide a Name</div>\r\n    <label class=\"form-label-required\" for=\"username\">Username</label>\r\n    <input type=\"text\"\r\n            formControlName=\"username\"\r\n            placeholder=\"Enter Username\"\r\n            [class.input-error]=\"!registerForm.controls['username'].valid && registerForm.controls['username'].touched\">\r\n    <div *ngIf=\"!registerForm.controls['username'].valid && registerForm.controls['username'].touched\"\r\n        class=\"validation-error\">Provide a Username</div>\r\n    <label class=\"form-label-required\" for=\"password\">Password</label>\r\n    <input type=\"password\"\r\n            formControlName=\"password\"\r\n            placeholder=\"Enter Password\"\r\n            [class.input-error]=\"!registerForm.controls['password'].valid && registerForm.controls['password'].touched\">\r\n    <div *ngIf=\"!registerForm.controls['password'].valid && registerForm.controls['password'].touched\"\r\n          class=\"validation-error\">Provide a Password</div>\r\n    <input type=\"submit\"\r\n            value=\"Register\"\r\n            (click)=\"onSubmit()\">\r\n  </form>\r\n  <button (click)=\"routeToLogin()\">Go Back to Login</button>\r\n</section>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-10e062ce47ee90912e707eed5270e3be",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MainComponent } from './main/main.component';\r\nimport { NavComponent } from './nav/nav.component';\r\nimport { FishingOrgComponent } from './fishing-org/fishing-org.component';\r\nimport { OrganizationComponent } from './fishing-org/organization/organization.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AboutComponent } from './about/about.component';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MainComponent,\r\n    NavComponent,\r\n    FishingOrgComponent,\r\n    OrganizationComponent,\r\n    AboutComponent,\r\n  ],\r\n  imports: [\r\n    AppRoutingModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SharedModule\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AboutComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FishingOrgComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "NavComponent"
                        },
                        {
                            "name": "OrganizationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-d3e5b48d87f35ee2ad1d61f82861742e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Route, Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AboutComponent } from './about/about.component';\r\nimport { FishingOrgComponent } from './fishing-org/fishing-org.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { UserLogInGuardService } from './login/user-log-in-guard.service';\r\n\r\nconst fallbackRoute: Route = {\r\n  path: '**',\r\n  component: LoginComponent\r\n}\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: 'login',\r\n        loadChildren: () => \"import('./login/login.module').then(m => m.LoginModule)\"\r\n      },\r\n      {\r\n        path: 'home',\r\n        component: FishingOrgComponent,\r\n        canActivate: [UserLogInGuardService],\r\n      },\r\n      {\r\n        path: 'charters',\r\n        loadChildren: () => \"import('./charters/charters.module').then(m => m.ChartersModule)\"\r\n      },\r\n      { path: 'about',\r\n        component: AboutComponent,\r\n        canActivate: [UserLogInGuardService]\r\n    },\r\n      fallbackRoute\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {\r\n    scrollPositionRestoration: 'top',\r\n    relativeLinkResolution: 'legacy'\r\n})],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChartersModule",
            "id": "module-ChartersModule-aca23d1f90f298275ccf71b0642f05f1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/charters/charters.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ConfirmationComponent } from '../shared/components/confirmation/confirmation.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { AddCharterComponent } from './add-charter/add-charter.component';\r\nimport { AddMemberComponent } from './add-member/add-member.component';\r\n\r\nimport { charterRoutes } from './charters-routing.module';\r\nimport { ChartersComponent } from './charters.component';\r\nimport { GroupDetailsComponent } from './group-details/group-details.component';\r\nimport { MemberComponent } from './group-details/member/member.component';\r\nimport { GroupComponent } from './group/group.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    SharedModule,\r\n    charterRoutes\r\n  ],\r\n  declarations: [\r\n    ChartersComponent,\r\n    GroupComponent,\r\n    GroupDetailsComponent,\r\n    MemberComponent,\r\n    AddCharterComponent,\r\n    AddMemberComponent,\r\n  ],\r\n  exports: [\r\n    ChartersComponent,\r\n    GroupComponent,\r\n    GroupDetailsComponent,\r\n    MemberComponent\r\n  ],\r\n  providers: [\r\n    ConfirmationComponent\r\n  ]\r\n})\r\nexport class ChartersModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddCharterComponent"
                        },
                        {
                            "name": "AddMemberComponent"
                        },
                        {
                            "name": "ChartersComponent"
                        },
                        {
                            "name": "GroupComponent"
                        },
                        {
                            "name": "GroupDetailsComponent"
                        },
                        {
                            "name": "MemberComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChartersComponent"
                        },
                        {
                            "name": "GroupComponent"
                        },
                        {
                            "name": "GroupDetailsComponent"
                        },
                        {
                            "name": "MemberComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginModule",
            "id": "module-LoginModule-1287879845187220c318ebff94798efa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/login/login.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { loginRoutes } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    loginRoutes\r\n  ],\r\n  declarations: [\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ],\r\n  exports: [\r\n    LoginComponent,\r\n    RegisterComponent\r\n  ]\r\n})\r\nexport class LoginModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-5b24d22e6b1814962ea9513b81b18446",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ConfirmationComponent } from './components/confirmation/confirmation.component';\r\nimport { LoaderComponent } from './components/loader/loader.component';\r\nimport { MessageComponent } from './components/message/message.component';\r\nimport { CharterSearchPipe } from './pipes/charter-search.pipe';\r\nimport { OrgFilterPipe } from './pipes/org-filter.pipe';\r\nimport { PhonePipe } from './pipes/phone.pipe';\r\nimport { SpotsAvailablePipe } from './pipes/spots-available.pipe';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    ConfirmationComponent,\r\n    LoaderComponent,\r\n    MessageComponent,\r\n    CharterSearchPipe,\r\n    OrgFilterPipe,\r\n    PhonePipe,\r\n    SpotsAvailablePipe\r\n  ],\r\n  exports: [\r\n    ConfirmationComponent,\r\n    LoaderComponent,\r\n    MessageComponent,\r\n    CharterSearchPipe,\r\n    OrgFilterPipe,\r\n    PhonePipe,\r\n    SpotsAvailablePipe\r\n  ]\r\n})\r\n\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CharterSearchPipe"
                        },
                        {
                            "name": "ConfirmationComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "OrgFilterPipe"
                        },
                        {
                            "name": "PhonePipe"
                        },
                        {
                            "name": "SpotsAvailablePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CharterSearchPipe"
                        },
                        {
                            "name": "ConfirmationComponent"
                        },
                        {
                            "name": "LoaderComponent"
                        },
                        {
                            "name": "MessageComponent"
                        },
                        {
                            "name": "OrgFilterPipe"
                        },
                        {
                            "name": "PhonePipe"
                        },
                        {
                            "name": "SpotsAvailablePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AllOrgs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/fishing-org/fishing-org.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "charterRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charters/charters-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ModuleWithProviders<RouterModule>",
                "defaultValue": "RouterModule.forChild(routes)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "fallbackRoute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Route",
                "defaultValue": "{\r\n  path: '**',\r\n  component: LoginComponent\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/loader/loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loginRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/login/login-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ModuleWithProviders<RouterModule>",
                "defaultValue": "RouterModule.forChild(routes)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charters/charters-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: ChartersComponent,\r\n        canActivate: [UserLogInGuardService]\r\n      },\r\n      {\r\n        path: 'details',\r\n        component: GroupDetailsComponent,\r\n        canActivate: [UserLogInGuardService]\r\n      }\r\n    ]\r\n  }\r\n]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/fishing-org/fishing-org.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<OrganizationComponent>",
                "defaultValue": "(args: OrganizationComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/loader/loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LoaderComponent>",
                "defaultValue": "(args: LoaderComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/fishing-org/fishing-org.stories.ts": [
                {
                    "name": "AllOrgs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/fishing-org/fishing-org.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/fishing-org/fishing-org.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<OrganizationComponent>",
                    "defaultValue": "(args: OrganizationComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/charters/charters-routing.module.ts": [
                {
                    "name": "charterRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charters/charters-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleWithProviders<RouterModule>",
                    "defaultValue": "RouterModule.forChild(routes)"
                },
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charters/charters-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: ChartersComponent,\r\n        canActivate: [UserLogInGuardService]\r\n      },\r\n      {\r\n        path: 'details',\r\n        component: GroupDetailsComponent,\r\n        canActivate: [UserLogInGuardService]\r\n      }\r\n    ]\r\n  }\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/app/app-routing.module.ts": [
                {
                    "name": "fallbackRoute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Route",
                    "defaultValue": "{\r\n  path: '**',\r\n  component: LoginComponent\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/app/shared/components/loader/loader.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/loader/loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/loader/loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LoaderComponent>",
                    "defaultValue": "(args: LoaderComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/login/login-routing.module.ts": [
                {
                    "name": "loginRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/login/login-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModuleWithProviders<RouterModule>",
                    "defaultValue": "RouterModule.forChild(routes)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "children": [
                            {
                                "path": "login",
                                "loadChildren": "./login/login.module#LoginModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [],
                                        "module": "LoginModule"
                                    }
                                ]
                            },
                            {
                                "path": "home",
                                "component": "FishingOrgComponent",
                                "canActivate": [
                                    "UserLogInGuardService"
                                ]
                            },
                            {
                                "path": "charters",
                                "loadChildren": "./charters/charters.module#ChartersModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [],
                                        "module": "ChartersModule"
                                    }
                                ]
                            },
                            {
                                "path": "about",
                                "component": "AboutComponent",
                                "canActivate": [
                                    "UserLogInGuardService"
                                ]
                            },
                            "fallbackRoute"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fallbackRoute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/add-charter/add-charter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCharterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/add-member/add-member.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMemberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/charters-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "charterRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/charters-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/charters.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartersComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/group-details/group-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/group-details/member/member.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/charters/group/group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/fishing-org/fishing-org.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FishingOrgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/fishing-org/fishing-org.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllOrgs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/fishing-org/fishing-org.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/fishing-org/organization/organization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrganizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/login/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/login/user-log-in-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "UserLogInGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/Charter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Charter",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/FishingOrganization.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FishingOrganization",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/Member.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Member",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/login-request.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/group.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GroupService",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/services/member.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemberService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/organization.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrganizationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirmation/confirmation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loader/loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loader/loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/message/Message.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Message",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/message/message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/message/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessageService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/charter-search.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CharterSearchPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/org-filter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "OrgFilterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/phone.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PhonePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/spots-available.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SpotsAvailablePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}